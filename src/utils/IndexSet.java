/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package utils;

import exceptions.DEC_Exception;
import static java.lang.Math.pow;
import java.util.ArrayList;

/**
 *
 * @author laptop
 */
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : IndexSet.java
//  @ Date : 14/02/2016
//  @ Author : Camilo Rey
//
//




public class IndexSet {
	protected ArrayList<Integer> indices;
	public IndexSet() {
	 this.indices = new ArrayList<Integer>();
	}
	
	public IndexSet(int index) {
	 this.indices = new ArrayList<Integer>();
         indices.add(new Integer(index));
	}
	public IndexSet(int i0, int i1){
         this.indices = new ArrayList<Integer>();
         indices.add(new Integer(i0));
         indices.add(new Integer(i1));
        }
        public IndexSet(int i0, int i1, int i2){
         this.indices = new ArrayList<Integer>();
         indices.add(new Integer(i0));
         indices.add(new Integer(i1));
         indices.add(new Integer(i2));
        }
        public IndexSet(int i0, int i1, int i2, int i3){
         this.indices = new ArrayList<Integer>();
         indices.add(new Integer(i0));
         indices.add(new Integer(i1));
         indices.add(new Integer(i2));
         indices.add(new Integer(i3));
        }
	public IndexSet(int[] inds) {
	 this.indices = new ArrayList<Integer>();
         for(int i=0;i<inds.length;i++){
          indices.add(new Integer(inds[i]));
         }
	}
	public IndexSet(ArrayList<Integer> inds){
         this.indices = inds;
        }
	public int size() {
	 return indices.size();
	}
	
	public int getIndex(int pos) throws DEC_Exception{
         if(pos<0 || pos>=indices.size()){
          throw new DEC_Exception(" index: "+pos+" is out of bounds.");
         }else{
	  return indices.get(pos).intValue();
         }
	}
        public void addIndex(int value) throws DEC_Exception{
         if(indexPosition(value) != -1){
          throw new DEC_Exception(" value: "+value+" is already in set.");
         }else{
          indices.add(new Integer(value));
         }
        }
	
	public void setIndex(int pos, int value) throws DEC_Exception{
         if(pos<0){
          throw new DEC_Exception(" index: "+pos+" is less than zero.");
         }else if(pos>=indices.size()){
          throw new DEC_Exception(" index: "+pos+" is unreachable.");
         }else{
	  indices.set(pos, new Integer(value));
         }
	}
	
	public void removeIndex(int pos) throws DEC_Exception{
         if(pos<0){
          throw new DEC_Exception(" index: "+pos+" is less than zero.");
         }else if(pos>indices.size()){
          throw new DEC_Exception(" index: "+pos+" is unreachable.");
         }else{
	  indices.remove(pos);
         }
	}
	public IndexSet removeFromIndices(int pos) throws DEC_Exception{
         if(pos <0 || pos>=indices.size()){
          throw new DEC_Exception(" index: "+pos+" is out of bounds.");
         }else{
          IndexSet removed = new IndexSet();
         for(int i=0;i<indices.size();i++){
          if(i!=pos){
           removed.addIndex(indices.get(i));
          }
         }
         return removed;
         }
        }
	public int indexPosition(int value) {
	 int index = -1;
         for(int i=0;i<indices.size();i++){
          if(indices.get(i).intValue() == value){
           index = i;
          }
         }
         return index;
	}
	
	public boolean containsIndex(int value) {
	 return indexPosition(value) != -1;
	}
	public boolean contains(IndexSet set) throws DEC_Exception{
	 boolean contains = true;
         for(int i=0;i<set.size();i++){
          contains = contains && containsIndex(set.getIndex(i));
         }
         return contains;
	}
	public boolean isContainedIn(IndexSet set) throws DEC_Exception{
	 return set.contains(this);
	}
        public boolean isEqual(IndexSet set)throws DEC_Exception{
         if(size() != set.size()){
          return false;
         }else{
          if(size() == 1){
           return indices.get(0).intValue() == set.getIndex(0);
          }else{
           return contains(set) && isContainedIn(set);
          }
         }
        }
	public int sortVertices() throws DEC_Exception{
         int numTranspositions = 0;
         for(int i=0;i<size();i++){
          for(int j=1;j<size()-i;j++){
           int posJMinus = getIndex(j-1);
           int posJ = getIndex(j);
           if(posJMinus>posJ){
            setIndex(j-1,posJ);
            setIndex(j,posJMinus);
            numTranspositions++;
           }
          }
         }
         return (int) pow(-1,numTranspositions);
        }
	public IndexSet union(IndexSet set) throws DEC_Exception{
	 ArrayList<Integer> members = new ArrayList<Integer>();
         for(int i=0;i<indices.size();i++){
          members.add(indices.get(i));
         }
         for(int i=0;i<set.size();i++){
          if(!containsIndex(set.getIndex(i))){
           members.add(set.getIndex(i));
          }
         }
         int[] values = new int[members.size()];
         for(int i=0;i<values.length;i++){
          values[i] = members.get(i).intValue();
         }
         return new IndexSet(values);
	}
	
	public IndexSet intersection(IndexSet set) throws DEC_Exception{
	 ArrayList<Integer> members = new ArrayList<Integer>();
         for(int i=0;i<indices.size();i++){
          if(set.containsIndex(indices.get(i).intValue())){
           members.add(indices.get(i));
          }
         }
         int[] values = new int[members.size()];
         for(int i=0;i<values.length;i++){
          values[i] = members.get(i).intValue();
         }
         return new IndexSet(values);
	}
	
	public IndexSet difference(IndexSet set) throws DEC_Exception{
         ArrayList<Integer> members = new ArrayList<Integer>();
         for(int i=0;i<indices.size();i++){
          if(!set.containsIndex(indices.get(i).intValue())){
           members.add(indices.get(i));
          }
         }
	 int[] values = new int[members.size()];
         for(int i=0;i<values.length;i++){
          values[i] = members.get(i).intValue();
         }
         return new IndexSet(values);
	}
	
	public IndexSet symmetricDifference(IndexSet set)throws DEC_Exception{
	 return difference(set).union(set.difference(this));
	}
        @Override
        public String toString(){
         String content ="";
         for(int i=0;i<indices.size();i++){
          content+= indices.get(i).intValue();
          if(i<indices.size()-1){
           content+=",";
          }
         }
         return "["+content+"]";
                 
        }
        
	
}
